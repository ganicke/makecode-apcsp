{"componentChunkName":"component---src-templates-docs-js","path":"/gettingstarted/concepts","result":{"data":{"site":{"siteMetadata":{"title":"BooGi","docsLocation":"https://github.com/filipowm/boogi","docsLocationType":"github","editable":true}},"mdx":{"fields":{"id":"9c33725c-9554-58c5-89d7-828205ca30ee","title":"Concepts","slug":"/gettingstarted/concepts"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Concepts\",\n  \"order\": 1\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"Docs as Code\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Docs as Code means applying software development processes and tools to\\ndocumentation you create. Teams write content in plain text with\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.markdownguide.org/\"\n  }), \"Markdown\"), \" using text editor. Then content is\\ntransformed to documentation page using a static site generator rather than\\na publishing system.\")), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"Markdown\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Markdown is a plain text formatting syntax aimed at making writing for the Internet easier.\\nThe philosophy behind Markdown is that plain text documents should be readable without\\ntags mussing everything up, but there should still be ways to add text modifiers\\nlike lists, bold, italics, etc. It is an alternative to \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"WYSIWYG\"), \" (what you see is what\\nyou get) editors, which use rich text that later gets converted to proper HTML.\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#docs-as-code","title":"Docs as Code"},{"url":"#markdown","title":"Markdown"}]},"timeToRead":1,"parent":{"__typename":"File","relativePath":"gettingstarted/concepts.md","fields":{"gitLogLatestAuthorName":"ganicke","gitLogLatestAuthorEmail":"gnickel@aquent.com","gitLogLatestDate":"19 days ago"}},"frontmatter":{"metaTitle":null,"showMetadata":null,"editable":null,"showPreviousNext":null,"showToc":null}},"gitBranch":{"name":"gh-pages"},"gitCommit":{"hash":"8c0212aa032679b934b663289af98e5943bf6f0d","date":"2021-04-06 06:33"}},"pageContext":{"id":"9c33725c-9554-58c5-89d7-828205ca30ee"}},"staticQueryHashes":["12478684","12478684","2882937274","2882937274","353167761","353167761","3812332637","3812332637"]}