{"componentChunkName":"component---src-templates-docs-js","path":"/editing/markdown","result":{"data":{"site":{"siteMetadata":{"title":"BooGi","docsLocation":"https://github.com/filipowm/boogi","docsLocationType":"github","editable":true}},"mdx":{"fields":{"id":"4f795d3f-b872-5054-b7ac-697b90e3e73a","title":"Markdown cheatsheet","slug":"/editing/markdown"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Markdown cheatsheet\",\n  \"order\": 4\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"Headers\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"# Header Level 1\\n## Header Level 2\\n### Header Level 3\\n#### Header Level 4\\n##### Header Level 5\\n###### Header Level 6\\n\"))), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"H1\")), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"H2\")), mdx(\"section\", null, mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"H3\")), mdx(\"section\", null, mdx(\"h4\", {\n    parentName: \"section\"\n  }, \"H4\")), mdx(\"section\", null, mdx(\"h4\", {\n    parentName: \"section\"\n  }, \"H5\")), mdx(\"section\", null, mdx(\"h4\", {\n    parentName: \"section\"\n  }, \"H6\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Alternatively, for H1 and H2, an underline-ish style:\")), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"Alt-H1\")), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Alt-H2\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"You can also specify header ID:\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"Hello        {#id}\\n-----\\n\"))), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"Hello        {#id}\")), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"Emphasis\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"Italics (emphasis):         *asterisks* or _underscores_.\\nBold (Strong emphasis):     **asterisks** or __underscores__.\\nCombined emphasis with      **asterisks and _underscores_**.\\nStrikethrough:              ~~Scratch this.~~\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Italics (emphasis):         \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"asterisks\"), \" or \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"underscores\"), \".\\nBold (Strong emphasis):     \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"asterisks\"), \" or \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"underscores\"), \".\\nCombined emphasis with      \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"asterisks and \", mdx(\"em\", {\n    parentName: \"strong\"\n  }, \"underscores\")), \".\\nStrikethrough:              \", mdx(\"del\", {\n    parentName: \"p\"\n  }, \"Scratch this.\"))), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"Lists\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"1. First ordered list item\\n2. Another item\\n    * Unordered sub-list.\\n1. Actual numbers don't matter, just that it's a number\\n    1. Ordered sub-list\\n4. And another item.\\n\\n    You can have properly indented paragraphs within list items. Notice the blank\\n    line above, and the leading spaces.\\n\\n* Unordered list can use asterisks\\n- Or minuses\\n+ Or pluses\\n\")), mdx(\"ol\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"First ordered list item\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Another item\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Unordered sub-list.\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Actual numbers don't matter, just that it's a number\"), mdx(\"ol\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Ordered sub-list\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"And another item.\"), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"You can have properly indented paragraphs within list items. Notice the blank\\nline above, and the leading spaces.\"))), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Unordered list can use asterisks\")), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Or minuses\")), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Or pluses\"))), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"Links\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"[I'm an inline-style link](https://www.google.com)\\n\\n[I'm an inline-style link with title](https://www.google.com \\\"Google's Homepage\\\")\\n\\n[I'm a reference-style link][Arbitrary case-insensitive reference text]\\n\\n[I'm a relative reference to a repository file](../blob/master/LICENSE)\\n\\n[You can use numbers for reference-style link definitions][1]\\n\\nOr leave it empty and use the [link text itself].\\n\\nURLs and URLs in angle brackets will automatically get turned into links.\\nhttp://www.example.com or <http://www.example.com> and sometimes\\nexample.com.\\n\\nSome text to show that the reference links can follow later.\\n\\n[arbitrary case-insensitive reference text]: https://www.mozilla.org\\n[1]: http://slashdot.org\\n[link text itself]: http://www.reddit.com\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.google.com\"\n  }), \"I'm an inline-style link\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.google.com\",\n    \"title\": \"Google's Homepage\"\n  }), \"I'm an inline-style link with title\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.mozilla.org\"\n  }), \"I'm a reference-style link\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"../blob/master/LICENSE\"\n  }), \"I'm a relative reference to a repository file\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://slashdot.org\"\n  }), \"You can use numbers for reference-style link definitions\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Or leave it empty and use the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://www.reddit.com\"\n  }), \"link text itself\"), \".\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"URLs and URLs in angle brackets will automatically get turned into links.\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://www.example.com\"\n  }), \"http://www.example.com\"), \" or \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://www.example.com\"\n  }), \"http://www.example.com\"), \" and sometimes\\nexample.com.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Some text to show that the reference links can follow later.\")), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"Images\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"Here's our logo (hover to see the title text):\\n\\nInline-style:\\n![alt text](https://github.com/adam-p/markdown-here/raw/master/src/\\ncommon/images/icon48.png \\\"Logo Title Text 1\\\")\\n\\nReference-style:\\n![alt text][logo]\\n\\n[logo]: https://github.com/adam-p/markdown-here/raw/master/src/\\ncommon/images/icon48.png \\\"Logo Title Text 2\\\"\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Here's our logo (hover to see the title text):\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Inline-style:\\n\", mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png\",\n    \"alt\": \"alt text\",\n    \"title\": \"Logo Title Text 1\"\n  }))), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Reference-style:\\n\", mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png\",\n    \"alt\": \"alt text\",\n    \"title\": \"Logo Title Text 2\"\n  })))), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"Code and syntax highlighting\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"Inline `code` has `back-ticks around` it.\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Inline \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"code\"), \" has \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"back-ticks around\"), \" it.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Code blocks:\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"```javascript\\nvar s = \\\"JavaScript syntax highlighting\\\";\\nalert(s);\\n```\\n\\n```python\\ns = \\\"Python syntax highlighting\\\"\\nprint s\\n```\\n\\n```\\nNo language indicated, so no syntax highlighting.\\nBut let's throw in a <b>tag</b>.\\n```\\n\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"var s = \\\"JavaScript syntax highlighting\\\";\\nalert(s);\\n\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), \"s = \\\"Python syntax highlighting\\\"\\nprint s\\n\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"public static int getDate(String enum) {\\n    return null;\\n}\\n\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"No language indicated, so no syntax highlighting.\\nBut let's throw in a <b>tag</b>.\\n\"))), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"Tables\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-markdown\"\n  }), \"Colons can be used to align columns.\\n\\n| Tables        | Are           | Cool  |\\n| ------------- |:-------------:| -----:|\\n| col 3 is      | right-aligned | $1600 |\\n| col 2 is      | centered      |   $12 |\\n| zebra stripes | are neat      |    $1 |\\n\\nThere must be at least 3 dashes separating each header cell.\\nThe outer pipes (|) are optional, and you don't need to make the\\nraw Markdown line up prettily. You can also use inline Markdown.\\n\\nMarkdown | Less | Pretty\\n--- | --- | ---\\n*Still* | `renders` | **nicely**\\n1 | 2 | 3\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Colons can be used to align columns.\"), mdx(\"table\", {\n    parentName: \"section\"\n  }, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Tables\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"Are\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"right\"\n  }), \"Cool\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Tables\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"left\"\n  }), \"Are\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Cool\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"col 3 is\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"right-aligned\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"right\"\n  }), \"$1600\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"col 3 is\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"left\"\n  }), \"right-aligned\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"$1600\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"col 2 is\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"centered\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"right\"\n  }), \"$12\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"col 2 is\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"left\"\n  }), \"centered\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"$12\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"zebra stripes\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"center\"\n  }), \"are neat\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"right\"\n  }), \"$1\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"zebra stripes\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": \"left\"\n  }), \"are neat\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"$1\")))), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"There must be at least 3 dashes separating each header cell.\\nThe outer pipes (|) are optional, and you don't need to make the\\nraw Markdown line up prettily. You can also use inline Markdown.\"), mdx(\"table\", {\n    parentName: \"section\"\n  }, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Markdown\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Less\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"Pretty\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"em\", {\n    parentName: \"td\"\n  }, \"Still\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"inlineCode\", {\n    parentName: \"td\"\n  }, \"renders\")), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), mdx(\"strong\", {\n    parentName: \"td\"\n  }, \"nicely\"))), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"1\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"2\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"3\"))))), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"Blockquotes\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"> Blockquotes are very handy in email to emulate reply text.\\n> This line is part of the same quote.\\n\\nQuote break.\\n\\n> This is a very long line that will still be quoted properly when it wraps.\\n  Oh boy let's keep writing to make sure this is long enough to actually\\n  wrap for everyone. Oh, you can *put* **Markdown** into a blockquote.\\n\")), mdx(\"blockquote\", {\n    parentName: \"section\"\n  }, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Blockquotes are very handy in email to emulate reply text.\\nThis line is part of the same quote.\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Quote break.\"), mdx(\"blockquote\", {\n    parentName: \"section\"\n  }, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"This is a very long line that will still be quoted properly when it wraps. Oh boy let's keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"put\"), \" \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Markdown\"), \" into a blockquote.\"))), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"Inline\", \" \", mdx(\"abbr\", _extends({\n    parentName: \"h1\"\n  }, {\n    \"title\": \"HyperTextMarkupLanguage\"\n  }), \"HTML\"), \"\", \"\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"You can also use raw\", \" \", mdx(\"abbr\", _extends({\n    parentName: \"p\"\n  }, {\n    \"title\": \"HyperTextMarkupLanguage\"\n  }), \"HTML\"), \"\", \" in your Markdown, and it'll mostly work pretty well.\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"<dl>\\n  <dt>Definition list</dt>\\n  <dd>Is something people use sometimes.</dd>\\n\\n  <dt>Markdown in HTML</dt>\\n  <dd>Does *not* work **very** well. Use HTML <em>tags</em>.</dd>\\n</dl>\\n\"))), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"Horizontal rule\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"Three or more...\\n\\n---\\nHyphens\\n\\n***\\nAsterisks\\n\\n___\\nUnderscores\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Three or more...\"), mdx(\"hr\", {\n    parentName: \"section\"\n  }), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Hyphens\"), mdx(\"hr\", {\n    parentName: \"section\"\n  }), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Asterisks\"), mdx(\"hr\", {\n    parentName: \"section\"\n  }), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Underscores\")), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"Footnotes\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"This is some text.\", mdx(\"sup\", _extends({\n    parentName: \"p\"\n  }, {\n    \"id\": \"fnref-1\"\n  }), mdx(\"a\", _extends({\n    parentName: \"sup\"\n  }, {\n    \"href\": \"#fn-1\",\n    \"className\": \"footnote-ref\"\n  }), \"1\")), \". Other text.\", mdx(\"sup\", _extends({\n    parentName: \"p\"\n  }, {\n    \"id\": \"fnref-footnote\"\n  }), mdx(\"a\", _extends({\n    parentName: \"sup\"\n  }, {\n    \"href\": \"#fn-footnote\",\n    \"className\": \"footnote-ref\"\n  }), \"footnote\")), \".\")), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"Abbreviations\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"This is some text not written in\", \" \", mdx(\"abbr\", _extends({\n    parentName: \"p\"\n  }, {\n    \"title\": \"HyperTextMarkupLanguage\"\n  }), \"HTML\"), \"\", \" but in\", \" \", mdx(\"abbr\", _extends({\n    parentName: \"p\"\n  }, {\n    \"title\": \"It's called Markdown\"\n  }), \"another language\"), \"\", \"!\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"{:.mega-big}\")), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"Definition lists\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"kramdown\\n: A Markdown-superset converter\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Maruku\\n:     Another Markdown-superset converter\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"{:#term} Term with id=\\\"term\\\"\\n: {:.cls} Definition with class \\\"cls\\\"\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"{:#term1} First term\\n{:#term2} Second term\\n: {:.cls} Definition\")), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"EOB\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"list one\\n^\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"list two\"))), mdx(\"section\", null, mdx(\"h1\", {\n    parentName: \"section\"\n  }, \"Inline classes\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"This \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"is\"), \"{:.underline} some \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"code\"), \"{:#id}{:.class}.\\nA \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"test.html\"\n  }), \"link\"), \"{:rel='something'} and some \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"tools\"), \"{:.tools}.%\")), mdx(\"div\", {\n    \"className\": \"footnotes\"\n  }, mdx(\"hr\", {\n    parentName: \"div\"\n  }), mdx(\"ol\", {\n    parentName: \"div\"\n  }, mdx(\"li\", _extends({\n    parentName: \"ol\"\n  }, {\n    \"id\": \"fn-1\"\n  }), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Some \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"crazy\"), \" footnote definition.\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"#fnref-1\",\n    \"className\": \"footnote-backref\"\n  }), \"\\u21A9\"))), mdx(\"li\", _extends({\n    parentName: \"ol\"\n  }, {\n    \"id\": \"fn-footnote\"\n  }), mdx(\"blockquote\", {\n    parentName: \"li\"\n  }, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Blockquotes can be in a footnote.\")), mdx(\"pre\", {\n    parentName: \"li\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"as well as code blocks\\n\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, \"or, naturally, simple paragraphs.\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"#fnref-footnote\",\n    \"className\": \"footnote-backref\"\n  }), \"\\u21A9\"))))));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#headers","title":"Headers"},{"url":"#h1","title":"H1","items":[{"url":"#h2","title":"H2","items":[{"url":"#h3","title":"H3","items":[{"url":"#h4","title":"H4"},{"url":"#h5","title":"H5"},{"url":"#h6","title":"H6"}]}]}]},{"url":"#alt-h1","title":"Alt-H1","items":[{"url":"#alt-h2","title":"Alt-H2"}]},{"url":"#hello--------id","title":"Hello        {#id}"},{"url":"#emphasis","title":"Emphasis"},{"url":"#lists","title":"Lists"},{"url":"#links","title":"Links"},{"url":"#images","title":"Images"},{"url":"#code-and-syntax-highlighting","title":"Code and syntax highlighting"},{"url":"#tables","title":"Tables"},{"url":"#blockquotes","title":"Blockquotes"},{"url":"#inline-html","title":"Inline HTML"},{"url":"#horizontal-rule","title":"Horizontal rule"},{"url":"#footnotes","title":"Footnotes"},{"url":"#abbreviations","title":"Abbreviations"},{"url":"#definition-lists","title":"Definition lists"},{"url":"#eob","title":"EOB"},{"url":"#inline-classes","title":"Inline classes"}]},"timeToRead":2,"parent":{"__typename":"File","relativePath":"editing/markdown.mdx","fields":{"gitLogLatestAuthorName":"ganicke","gitLogLatestAuthorEmail":"gnickel@aquent.com","gitLogLatestDate":"19 days ago"}},"frontmatter":{"metaTitle":null,"showMetadata":null,"editable":null,"showPreviousNext":null,"showToc":null}},"gitBranch":{"name":"gh-pages"},"gitCommit":{"hash":"8c0212aa032679b934b663289af98e5943bf6f0d","date":"2021-04-06 06:33"}},"pageContext":{"id":"4f795d3f-b872-5054-b7ac-697b90e3e73a"}},"staticQueryHashes":["12478684","12478684","2882937274","2882937274","353167761","353167761","3812332637","3812332637"]}