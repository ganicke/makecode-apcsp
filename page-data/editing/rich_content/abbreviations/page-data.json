{"componentChunkName":"component---src-templates-docs-js","path":"/editing/rich_content/abbreviations","result":{"data":{"site":{"siteMetadata":{"title":"MakeCode AP CSP","docsLocation":"https://github.com/ganicke/makecode-apcsp","docsLocationType":"github","editable":true}},"mdx":{"fields":{"id":"35d220db-419b-5577-a06f-f5868220ed55","title":"Abbreviations","slug":"/editing/rich_content/abbreviations"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Abbreviations\",\n  \"order\": 2\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Warning = makeShortcode(\"Warning\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"BooGi offers creating inline definitions of\\npopular jargon used. This is a good way to define abbreviations / terms\\nused in your company / area / profession.\"), mdx(\"p\", null, \"First define your jargon / definitions in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"jargon.yml\"), \" in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"config\"), \"\\ndirectory.\"), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Configuration\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Format of yaml file is following:\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\"\n  }), \"<term_key>: # key by which term can be referenced in the page content to embed jargon\\n  name: String # required name of term\\n  long_name: String # optional, long name of term\\n  description: String # optional, term description\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Example:\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"jargon.yml\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\"\n  }), \"saas:\\n  name: SaaS\\n  long_name: Software as a Service\\n  description: Software licensing and delivery model in which software is licensed\\n    on a subscription basis and is centrally hosted and managed\\nboogi:\\n  name: BooGi\\n  description: The best documentation tool in the space! Check it <a href=\\\"https://boogi.netlify.app\\\">here</a>.\\n\")), mdx(Warning, {\n    mdxType: \"Warning\"\n  }, \"When under development mode, you must restart BooGi to apply new jargon configuration.\")), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Usage\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Then in markdown wrap word defined as key (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"term_key\"), \") above in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"_\"), \" to use Jargon\\n(key is case-insensitive, thus \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"term_key\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"TERM_key\"), \" reference same term).\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Example\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-markdown\"\n  }), \"You can use any _saas_ application.\\n\\nTry _BooGi_ -- you'll love it :heart: !\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"You can use any \", mdx(\"em\", {\n    parentName: \"p\"\n  }, mdx(\"span\", _extends({\n    parentName: \"em\"\n  }, {\n    \"className\": \"jargon-term\"\n  }), \"saas\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"jargon-info\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }, mdx(\"b\", {\n    parentName: \"span\"\n  }, \"SaaS\"), \" - Software as a Service\"), \" Software licensing and delivery model in which software is licensed on a subscription basis and is centrally hosted and managed\"))), \" application.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Try \", mdx(\"em\", {\n    parentName: \"p\"\n  }, mdx(\"span\", _extends({\n    parentName: \"em\"\n  }, {\n    \"className\": \"jargon-term\"\n  }), \"BooGi\", mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"jargon-info\"\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  }, mdx(\"b\", {\n    parentName: \"span\"\n  }, \"BooGi\")), \" T lulzhe best documentation tool in the space! Check it \", mdx(\"a\", _extends({\n    parentName: \"span\"\n  }, {\n    \"href\": \"https://boogi.netlify.app\"\n  }), \"here\"), \".\"))), \" -- you'll love it \\u2764\\uFE0F !\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#configuration","title":"Configuration"},{"url":"#usage","title":"Usage"}]},"timeToRead":1,"parent":{"__typename":"File","relativePath":"editing/rich_content/abbreviations.md","fields":{"gitLogLatestAuthorName":"ganicke","gitLogLatestAuthorEmail":"gnickel@aquent.com","gitLogLatestDate":"20 days ago"}},"frontmatter":{"metaTitle":null,"showMetadata":null,"editable":null,"showPreviousNext":null,"showToc":null}},"gitBranch":{"name":"gh-pages"},"gitCommit":{"hash":"b80f4600a9416dc481778ea805cdbbe1ff3c6621","date":"2021-04-06 06:54"}},"pageContext":{"id":"35d220db-419b-5577-a06f-f5868220ed55"}},"staticQueryHashes":["12478684","12478684","2882937274","2882937274","353167761","353167761","3812332637","3812332637"]}