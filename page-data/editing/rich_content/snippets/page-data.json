{"componentChunkName":"component---src-templates-docs-js","path":"/editing/rich_content/snippets","result":{"data":{"site":{"siteMetadata":{"title":"MakeCode AP CSP","docsLocation":"https://github.com/ganicke/makecode-apcsp","docsLocationType":"github","editable":true}},"mdx":{"fields":{"id":"ea73ba23-c139-5d86-98e7-a3e413699a0a","title":"Code snippets","slug":"/editing/rich_content/snippets"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Code snippets\",\n  \"order\": 4,\n  \"tocDepth\": 2\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Warning = makeShortcode(\"Warning\");\nvar Layout = makeShortcode(\"Layout\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Crucial for any technical documentation is possibility to add code snippets\\nwith proper highlighting. BooGi supports various programming languages and\\nsyntaxes.\"), mdx(\"p\", null, \"To add code snippet, you can use:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#inlinecodesnippets\"\n  }), \"inline code snippets\"), \", which are a code blocks\\ndefined directly within page content\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", _extends({\n    parentName: \"li\"\n  }, {\n    \"href\": \"#externalcodesnippets\"\n  }), \"external code snippets\"), \", which are a code blocks\\ninserted from external file containing code\")), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Inline code snippets\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"To use inline code snippets, you should wrap your code block\\ninside triple backticks(\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"```\"), \" ), e.g.\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-markdown\"\n  }), \"```\\nthis is some code\\n```\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"You can define language of code block by specifying it's name\\nafter opening triple backticks, e.g.\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-markdown\"\n  }), \"```yaml\\nkey: value\\n```\\n\\n```javascript\\nconst uppercase = value => value.toUpperCase();\\n```\\n\"))), mdx(\"section\", null, mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Supported languages and syntaxes\"), mdx(Warning, {\n    mdxType: \"Warning\"\n  }, \"New languages and syntaxes will be added soon!\"), mdx(Layout, {\n    mdxType: \"Layout\"\n  }, mdx(\"div\", null, mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"bash\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"clike\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"c\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"cpp\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"css\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"css-extras\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"javascript\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"jsx\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"js-extras\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"coffeescript\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"diff\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"git\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"go\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"graphql\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"handlebars\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"json\"))), mdx(\"div\", null, mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"less\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"makefile\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"markdown\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"objectivec\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"ocaml\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"python\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"reason\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"sass\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"scss\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"sql\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"stylus\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"tsx\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"typescript\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"wasm\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"yaml\"))))), mdx(\"section\", null, mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Diff\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"The following is a code block with diff.\\nLines with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"+\"), \" highlighted in green shade indicating an addition.\\nLines with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"-\"), \" highlighted in red shade indicating a deletion.\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"- const data = ['1','2'];\\n+ const data = [1,2];\\n\"))), mdx(\"section\", null, mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Live editing\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Syntax\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"```javascript react-live=true\\n<button className={'btn btn-default'}>Change my text</button>\\n`` `\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Example\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\",\n    \"metastring\": \"react-live=true\",\n    \"react-live\": \"true\"\n  }), \"<button className={'btn btn-default'}>Change my text</button>\\n\"))), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"External code snippets\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"You can also embed the contents of specified files as code snippets.\\nAny files that will be embed this way \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"must\"), \" exist \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"snippets\"), \" directory.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"To embed an external code snippet just add\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"`embed:<path_to_file>`\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"to your content, where \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"path_to_file\"), \" is a relative path to the code\\nfile from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"snippets\"), \" directory.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Example\")), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"`embed:hello.java`\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, mdx(\"pre\", {\n    parentName: \"p\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-java\"\n  }), \"public static void main(String[] args) {\\n    System.out.println(\\\"Hello World\\\");\\n}\\n\")))), mdx(\"section\", null, mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Select lines\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"It's also possible to specify a range of lines to be hidden.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"You can either specify line ranges in the embed using the syntax:\"), mdx(\"ul\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"#Lx - Embed one line from a file\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"#Lx-y - Embed a range of lines from a file\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"#Lx-y,a-b - Embed non-consecutive ranges of lines from a file\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Example\"), \":\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-markdown\"\n  }), \"This is the JSX of my app:\\n\\n`embed:App.js#L6-8`\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"With this example snippet:\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"import React from \\\"react\\\"\\nimport ReactDOM from \\\"react-dom\\\"\\n\\nfunction App() {\\n  return (\\n    <div className=\\\"App\\\">\\n      <h1>Hello world</h1>\\n    </div>\\n  )\\n}\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Will produce something like this:\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-markdown\"\n  }), \"This is the JSX of my app:\\n\\n    <div className=\\\"App\\\">\\n      <h1>Hello world</h1>\\n    </div>\\n\"))), mdx(\"section\", null, mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Omitting lines\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"It's also possible to specify ranges of lines to be hidden from an embedded file by adding \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"// hide-range\"), \" comments to your files.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Example\"), \":\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"// hide-range{1-2}\\nimport React from \\\"react\\\"\\nimport ReactDOM from \\\"react-dom\\\"\\n\\nfunction App() {\\n  return (\\n    <div className=\\\"App\\\">\\n      <ul>\\n        <li>Not hidden</li>\\n        <li>Not hidden</li>\\n        {/* hide-range{1-2} */}\\n        <li>Hidden</li>\\n        <li>Hidden</li>\\n        {/* hide-next-line */}\\n        <li>Hidden</li>\\n      </ul>\\n    </div>\\n  )\\n}\\n\\n// hide-range{1-2}\\nconst rootElement = document.getElementById(\\\"root\\\")\\nReactDOM.render(<App />, rootElement)\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Will produce something like this:\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"function App() {\\n  return (\\n    <div className=\\\"App\\\">\\n      <ul>\\n        <li>Not hidden</li>\\n        <li>Not hidden</li>\\n      </ul>\\n    </div>\\n  )\\n}\\n\"))), mdx(\"section\", null, mdx(\"h3\", {\n    parentName: \"section\"\n  }, \"Specifying snippets by name\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"As an alternative to selecting a range of lines from a file, you can add\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"start-snippet{snippet-name}\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"end-snippet{snippet-name}\"), \" in comments in your files.\\nThe inclusion of a name for a snippet allows you to create an example file that contains\\nmultiple snippets that you reference from different places.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"You can specify that you want to only include a named snippet from the embed by\\nusing the syntax \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"{snippet: \\\"snippet-name\\\"}\"), \".\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Example\"), \":\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-markdown\"\n  }), \"The function to use is:\\n\\n`embed:api.js{snippet: \\\"funcA\\\"}`\\n\\nAnd it is invoked via:\\n\\n`embed:api.js{snippet: \\\"invokeA\\\"}`\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"With this example file \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"api.js\"), \":\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-javascript\"\n  }), \"// start-snippet{funcA}\\nfunction factorial(x) {\\n    if (x <= 1) return 1\\n    else return x * factorial(x - 1)\\n}\\n// end-snippet{funcA}\\n\\nfunction display() {\\n    let x = 5\\n    // start-snippet{invokeA}\\n    let xfact = factorial(x)\\n    // end-snippet{invokeA}\\n    println!(`{} factorial is {}`, x, xfact)\\n}\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Will produce something like this:\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-markdown\"\n  }), \"The function to use is:\\n\\nfunction factorial(x) {\\nif (x <= 1) return 1\\nelse return x \\\\* factorial(x - 1)\\n}\\n\\nAnd it is invoked via:\\n\\nlet xfact = factorial(x)\\n\"))));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#inline-code-snippets","title":"Inline code snippets","items":[{"url":"#supported-languages-and-syntaxes","title":"Supported languages and syntaxes"},{"url":"#diff","title":"Diff"},{"url":"#live-editing","title":"Live editing"}]},{"url":"#external-code-snippets","title":"External code snippets","items":[{"url":"#select-lines","title":"Select lines"},{"url":"#omitting-lines","title":"Omitting lines"},{"url":"#specifying-snippets-by-name","title":"Specifying snippets by name"}]}]},"timeToRead":1,"parent":{"__typename":"File","relativePath":"editing/rich_content/snippets.md","fields":{"gitLogLatestAuthorName":"ganicke","gitLogLatestAuthorEmail":"gnickel@aquent.com","gitLogLatestDate":"20 days ago"}},"frontmatter":{"metaTitle":null,"showMetadata":null,"editable":null,"showPreviousNext":null,"showToc":null}},"gitBranch":{"name":"gh-pages"},"gitCommit":{"hash":"b80f4600a9416dc481778ea805cdbbe1ff3c6621","date":"2021-04-06 06:54"}},"pageContext":{"id":"ea73ba23-c139-5d86-98e7-a3e413699a0a"}},"staticQueryHashes":["12478684","12478684","2882937274","2882937274","353167761","353167761","3812332637","3812332637"]}