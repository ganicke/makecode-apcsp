{"componentChunkName":"component---src-templates-docs-js","path":"/unit-5/day-14/student-tasks-solutions","result":{"data":{"site":{"siteMetadata":{"title":"MakeCode AP CSP","docsLocation":"https://github.com/ganicke/makecode-apcsp","docsLocationType":"github","editable":false}},"mdx":{"fields":{"id":"b18eb95c-8d1f-54bf-a0fe-58f8667ba7d2","title":"Student Tasks/Solutions","slug":"/unit-5/day-14/student-tasks-solutions"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Student Tasks/Solutions\",\n  \"metaTitle\": \"Student Tasks/Solutions\",\n  \"order\": 2\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Activity\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Task 1\"), \": \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://arcade.makecode.com/79596-10448-32982-10609\"\n  }), \"Arrays Task 1\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Task 1 Challenge\"), \": \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://arcade.makecode.com/35917-96194-85464-85735\"\n  }), \"Arrays Task 1 Challenge\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Task 2\"), \": \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://arcade.makecode.com/33648-76879-19832-38420\"\n  }), \"Arrays Task 2\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Task 2 Challenge\"), \": \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://arcade.makecode.com/69560-66280-17865-87706\"\n  }), \"Arrays Task 2 Challenge\"))), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Reflection/Homework\"), mdx(\"ol\", {\n    parentName: \"section\"\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"What is the difference between creating an array of numbers and storing multiple values as individual variables (as in, value1 = 1, value2 = 2, value3 ...)?\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"An array is a collection of values of the same data type that can be stored in a single variable.  It makes accessing, organizing, modifying and assigning a group of values easier.  Dealing with individual variable values can be cumbersome if there are a lot of values, and error-prone if the values are also somehow related to each other.\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"What can an array do that storing different variables by themselves cannot?\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"You can access and modify a collection of values in one operation.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"ou can access array values in a sequential order.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Arrays save computer memory - space can be dynamically allocated depending on the size of the array.  Variables must be declared ahead of time and take up space in memory.\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"How does the length of an array relate to the position of the final element?\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The length of an array is 1 more than the index position of the final element.\"))))));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#activity","title":"Activity"},{"url":"#reflectionhomework","title":"Reflection/Homework"}]},"timeToRead":1,"parent":{"__typename":"File","relativePath":"unit-5/day-14/student-tasks-solutions.md","fields":{"gitLogLatestAuthorName":"ganicke","gitLogLatestAuthorEmail":"gnickel@aquent.com","gitLogLatestDate":"8 days ago"}},"frontmatter":{"metaTitle":"Student Tasks/Solutions","showMetadata":null,"editable":null,"showPreviousNext":null,"showToc":null}},"gitBranch":{"name":"gh-pages"},"gitCommit":{"hash":"0b335d411c5c831c1e3b8d70fc6a2c44b6497af0","date":"2021-05-07 01:10"}},"pageContext":{"id":"b18eb95c-8d1f-54bf-a0fe-58f8667ba7d2"}},"staticQueryHashes":["12478684","12478684","2882937274","2882937274","353167761","353167761","3812332637","3812332637"]}