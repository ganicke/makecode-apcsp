{"componentChunkName":"component---src-templates-docs-js","path":"/configuration/setting-up/features","result":{"data":{"site":{"siteMetadata":{"title":"BooGi","docsLocation":"https://github.com/filipowm/boogi","docsLocationType":"github","editable":true}},"mdx":{"fields":{"id":"779ab00e-654d-5eeb-bf6e-dba91c386e0e","title":"Features","slug":"/configuration/setting-up/features"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Features\",\n  \"order\": 4\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"//TODO add screenshots\"), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Publishing draft docs\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"BooGi allows marking pages as drafts, thus not publishing\\nthem while you are still working on them. However, you can\\nalter this behavior by setting up \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"features.publishDraft\"), \"\\nproperty, or passing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"FEATURES_PUBLISH_DRAFT\"), \" environment\\nvariable.\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\"\n  }), \"features:\\n  publishDraft: true # set to true to publish draft pages\\n\"))), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Dark Mode theme\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Dark mode theme feature allow \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"changing between light and dark\\nstyling\"), \". If set switch button appears in header.\\nTo set up dark theme mode, configure following in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"config.yml\"), \" (under \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"features\"), \" key).\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\"\n  }), \"features:\\n  darkMode:\\n    enabled: true  # set to true to enable dark mode theme feature\\n    default: false # set to true to set dark mode as a default one\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Additionally to changes in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"config.yml\"), \" file, proper theme must be\\nconfigured. To do this, follow description defined in \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/configuration/themes\"\n  }), \"themes\"), \"\\ndocumentation.\")), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Edit on Repo\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Edit on Repo features shows \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Edit on Repo\"), \" button on every page,\\nwhere it is configured. It gives all users easy way to start editing\\nyour page.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"To set up Edit on Repo, configure following in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"config.yml\"), \" (under \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"features\"), \" key).\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\"\n  }), \"features:\\n  editOnRepo:\\n    location: https://github.com/filipowm/boogi # URL to Git repository\\n    type: github # type of Git repository. Only github, gitlab and bitbucket are supported.\\n    editable: true # whether every page is editable by default. This can be configured per page setting up 'editable' property in frontmatter\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"As written above, even if Edit on Repo is globally turned off or on, it can be altered\\nper page by setting up \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"editable\"), \" property in \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/editingcontent/page_config#frontmatter\"\n  }), \"frontmatter\"), \". This has precedence\\nover global configuration.\")), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Mermaid graphs\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Mermaid brings generation of diagrams and flowcharts from text in a similar manner as markdown.\\nDetails of usage are described in \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/editing/rich_content/graphs\"\n  }), \"Graphs\"), \" section.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"To set up Mermaid graphs, configure following in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"config.yml\"), \" (under \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"features\"), \" key).\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\"\n  }), \"features:\\n  mermaid:\\n    language: \\\"mermaid\\\" # language descriptor used \\n    theme: \\\"dark\\\" # diagram color theme. Choose one from: dark, neutral, forest, default.\\n    options: # additional configuration options\\n    width: 300 # desired viewport width while rendering the SVG\\n    height: 300 # desired viewport height while rendering the SVG\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"You can preview available the themes in the \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://mermaidjs.github.io/mermaid-live-editor\"\n  }), \"Live Editor\"), \".\\nAdditional configuration options passed in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"features.mermaid.options\"), \" can be checked in the\\n\", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://mermaid-js.github.io/mermaid/#/mermaidAPI\"\n  }), \"configuration options\"), \" passed to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"mermaid.initialize()\"), \".\")), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Page progress indicator\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Add a page progress indicator to your BooGi website. The progress bar moves as\\nyou scroll down the page. Users can know how far they\\u2019ve read into an article or page.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"To set up Page Progress, configure following in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"config.yml\"), \" (under \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"features\"), \" key).\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\"\n  }), \"features:\\n  pageProgress:\\n    enabled: true # set to true to enable\\n    includePaths: # list of paths for which page progress should be visible\\n      - \\\"/configuration/advanced/theme\\\" # it can be simple string\\n      - regex: \\\"^/syntax\\\" # or regex expression\\n    excludePaths: # list of paths for which page progress should not be visible\\n      - \\\"/\\\" # it can be simple string\\n      - regex: \\\"^/anything\\\" # or regex expression\\n    height: 3 # height in pixels of the progress bar\\n    prependToBody: false # set to true to prepend progress bar to <body>, otherwise append it\\n    color: \\\"#A05EB5\\\" # color of the progress bar. As of now light/dark mode themes are not supported\\n\"))), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Previous / Next navigation buttons\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Previous / Next buttons show up at the bottom of every content page and help\\nin navigation between previous and next page. While used, you can\\nalso configure left/right arrows to switch between previous/next pages.\\nIt's awesome feature to build tutorials or training pages.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"To set up Previous / Next navigation buttons, configure following in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"config.yml\"), \" (under \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"features\"), \" key).\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\"\n  }), \"features:\\n  previousNext:\\n    enabled: true # set to true to enable buttons globally\\n    arrowKeyNavigation: true # set to true to switch between pages using left/right arrow keys\\n\"))), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Propagating Netlify environment variables\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"When you deploy BooGi-based page on Netlify, you can take benefit\\nof automated propagation of some Netlify environment configuration,\\nsuch as page URL (especially useful for branch or pull request deployments)\\nand page location in code repository (e.g. Github).\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"We recommend setting this as \", mdx(\"inlineCode\", {\n    parentName: \"strong\"\n  }, \"true\"), \" \"), \".\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"To set up Netlify configuration propagation, configure following in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"config.yml\"), \" (under \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"features\"), \" key).\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\"\n  }), \"features:\\n  propagateNetlifyEnv: true\\n\"))), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"RSS feed\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"BooGi offers creation of \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"RSS\"), \" feeds. It allows users and applications\\nto access updates to websites in a standardized, computer-readable format.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"To set up RSS feed, configure following in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"config.yml\"), \" (under \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"features\"), \" key).\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\"\n  }), \"features:\\n  rss:\\n    enabled: true # set to true to enable RSS feed\\n    copyright: \\\"2020, Mateusz Filipowicz\\\" # copyright notice for content in the channel\\n    webMaster: \\\"Mateusz Filipowicz\\\" # email address for person responsible for technical issues relating to channel\\n    managingEditor: \\\"Mateusz Filipowicz\\\" # email address for person responsible for editorial content\\n    categories: # list of feed categories\\n      - Category 1\\n      - Category 2\\n    ttl: 60 # number of minutes that indicates how long a channel can be cached before refreshing from the source\\n    matchRegex: \\\"^/\\\" # regex specifying for which paths (pages) RSS should be created. Defaults to whole page.\\n    outputPath: \\\"/rss.xml\\\" # path under which feed will be accessible\\n    generator: \\\"boogi\\\" # indication of the program used to generate the channel\\n\"))), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Scroll to Top button\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"When enabled, this features displays button in bottom right corner\\nallowing to scroll to top of the page with a single click (or tap).\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\"\n  }), \"features:\\n  scrollTop: true # set to true to display scroll to top button\\n\"))), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Search\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"BooGi offers great content search capabilities. For details visit \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/configuration/settingup/search\"\n  }), \"search\"))), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Page metadata\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"BooGi can display page metadata (latest editor, last edit date) on every page below\\nthe page title. To set it up globally configure following in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"config.yml\"), \":\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\"\n  }), \"features:\\n  showMetadata: true\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Even if page metadata is globally turned off or on, it can be altered\\nper page by setting up \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"showMetadata\"), \" property in \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/editingcontent/page_config#frontmatter\"\n  }), \"frontmatter\"), \".\\nThis has precedence  over global configuration.\")), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Table of Contents\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Table of Contents displays right sidebar with a useful\\nnavigation between every section of the page. It also follows page scroll\\nand marks current section visible on the screen. New sections\\nare divided by using header (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"#\"), \") in page content.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"To set up table of contents, configure following in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"config.yml\"), \" (under \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"features\"), \" key).\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\"\n  }), \"features:\\n  toc:\\n    show: true # set to true to show ToC on every page\\n    depth: 3 # depth of the ToC.\\n\")), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Even if table of contents is globally turned off or on, it can be altered\\nper page by setting up \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"showToc\"), \" property in \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"/editingcontent/page_config#frontmatter\"\n  }), \"frontmatter\"), \".\\nAlso on page you can alter depth of table of contents by setting up\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"tocDepth\"), \" in frontmatter. Both settings have precedence over global configuration.\")), mdx(\"section\", null, mdx(\"h2\", {\n    parentName: \"section\"\n  }, \"Full screen mode\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, \"Full screen mode can be used to hide any disruptive page elements\\nand focus only on content. You can configure which elements should\\nbe hidden while in full screen mode.\"), mdx(\"p\", {\n    parentName: \"section\"\n  }, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Important:\"), \" Full screen mode is disabled by default.\"), mdx(\"pre\", {\n    parentName: \"section\"\n  }, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-yaml\"\n  }), \"features:\\n  fullScreenMode:\\n    enabled: false # set to true to enable full screen mode\\n    hideHeader: true # set to true to hide header while in full screen mode\\n    hideSidebar: true # set to true to hide sidebar while in full screen mode\\n    hideToc: true # set to true to hide Table of Contents while in full screen mode\\n\"))));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#publishing-draft-docs","title":"Publishing draft docs"},{"url":"#dark-mode-theme","title":"Dark Mode theme"},{"url":"#edit-on-repo","title":"Edit on Repo"},{"url":"#mermaid-graphs","title":"Mermaid graphs"},{"url":"#page-progress-indicator","title":"Page progress indicator"},{"url":"#previous--next-navigation-buttons","title":"Previous / Next navigation buttons"},{"url":"#propagating-netlify-environment-variables","title":"Propagating Netlify environment variables"},{"url":"#rss-feed","title":"RSS feed"},{"url":"#scroll-to-top-button","title":"Scroll to Top button"},{"url":"#search","title":"Search"},{"url":"#page-metadata","title":"Page metadata"},{"url":"#table-of-contents","title":"Table of Contents"},{"url":"#full-screen-mode","title":"Full screen mode"}]},"timeToRead":2,"parent":{"__typename":"File","relativePath":"configuration/setting-up/features.md","fields":{"gitLogLatestAuthorName":"ganicke","gitLogLatestAuthorEmail":"gnickel@aquent.com","gitLogLatestDate":"19 days ago"}},"frontmatter":{"metaTitle":null,"showMetadata":null,"editable":null,"showPreviousNext":null,"showToc":null}},"gitBranch":{"name":"gh-pages"},"gitCommit":{"hash":"8c0212aa032679b934b663289af98e5943bf6f0d","date":"2021-04-06 06:33"}},"pageContext":{"id":"779ab00e-654d-5eeb-bf6e-dba91c386e0e"}},"staticQueryHashes":["12478684","12478684","2882937274","2882937274","353167761","353167761","3812332637","3812332637"]}